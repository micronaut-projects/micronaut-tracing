[versions]
managed-brave-instrumentation = '5.13.10'
managed-brave-opentracing = '1.0.0'
managed-jaeger = '1.8.1'
kotlin = '1.7.10'
kotlin-coroutines = '1.6.3'
grpc = '1.47.0'
protobuf = '3.21.2'
micronaut-docs = '2.0.0'
managed-opentelemetry = '1.16.0'
managed-opentelemetry-alpha = '1.15.0-alpha'
managed-opentelemetry-instrumentation-alpha = '1.15.0-alpha'
managed-opentracing = '0.33.0'
managed-opentracing-grpc = '0.2.3'
managed-protobuf = '0.8.19'
managed-zipkin-reporter = '2.16.3'
managed-opentelemetry-contrib-aws-xray = '1.15.0'
managed-opentelemetry-gcp-trace = '0.22.0-alpha'

[libraries]
managed-opentelemetry-contrib-aws-xray = { module = 'io.opentelemetry.contrib:opentelemetry-aws-xray', version.ref = 'managed-opentelemetry-contrib-aws-xray'}
managed-opentelemetry-gcp-trace = { module = 'com.google.cloud.opentelemetry:exporter-auto', version.ref = 'managed-opentelemetry-gcp-trace'}

brave-opentracing = { module = 'io.opentracing.brave:brave-opentracing', version.ref = 'managed-brave-opentracing' }
grpc-protobuf = { module = 'io.grpc:grpc-protobuf', version.ref = 'grpc' }
grpc-stub = { module = 'io.grpc:grpc-stub', version.ref = 'grpc' }
jaeger = { module = 'io.jaegertracing:jaeger-thrift', version.ref = 'managed-jaeger' }
junit-jupiter-engine = { module = 'org.junit.jupiter:junit-jupiter-engine', version = '' }
kotlinx-coroutines-core = { module = 'org.jetbrains.kotlinx:kotlinx-coroutines-core', version.ref = 'kotlin-coroutines' }
kotlinx-coroutines-reactor = { module = 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor', version.ref = 'kotlin-coroutines' }
protobuf-java = { module = 'com.google.protobuf:protobuf-java', version.ref = 'protobuf' }
protobuf-java-util = { module = 'com.google.protobuf:protobuf-java-util', version.ref = 'protobuf' }
micronaut-docs-asciidoc-config-props = { module = 'io.micronaut.docs:micronaut-docs-asciidoc-config-props', version.ref = 'micronaut-docs' }
opentracing = { module = 'io.opentracing:opentracing-api', version.ref = 'managed-opentracing' }
opentracing-grpc = { module = 'io.opentracing.contrib:opentracing-grpc', version.ref = 'managed-opentracing-grpc' }
opentracing-util = { module = 'io.opentracing:opentracing-util', version.ref = 'managed-opentracing' }
protoc = { module = 'com.google.protobuf:protoc', version.ref = 'protobuf' }
protoc-grpc = { module = 'io.grpc:protoc-gen-grpc-java', version.ref = 'grpc' }
zipkin-brave-instrumentation = { module = 'io.zipkin.brave:brave-instrumentation-http', version.ref = 'managed-brave-instrumentation' }
zipkin-reporter = { module = 'io.zipkin.reporter2:zipkin-reporter', version.ref = 'managed-zipkin-reporter' }
opentelemetry-api = { module = 'io.opentelemetry:opentelemetry-api' }
opentelemetry-sdk = { module = 'io.opentelemetry:opentelemetry-sdk' }
opentelemetry-sdk-testing = { module = 'io.opentelemetry:opentelemetry-sdk-testing' }
opentelemetry-sdk-extension-aws = { module = 'io.opentelemetry:opentelemetry-sdk-extension-aws' }
opentelemetry-extension-annotations = { module = 'io.opentelemetry:opentelemetry-extension-annotations' }
opentelemetry-autoconfigure = { module = 'io.opentelemetry:opentelemetry-sdk-extension-autoconfigure' }
opentelemetry-instrumentation-api = { module = 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-api' }
opentelemetry-instrumentation-grpc = { module = 'io.opentelemetry.instrumentation:opentelemetry-grpc-1.6'}
opentelemetry-instrumentation-api-semconv = { module = 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-semconv' }
opentelemetry-aws-sdk = { module = 'io.opentelemetry.instrumentation:opentelemetry-aws-sdk-2.2' }

awssdk-core = { module = 'software.amazon.awssdk:sdk-core' }

micronaut-aws-bom = { module = 'io.micronaut.aws:micronaut-aws-bom' }

# BOMs
boms-opentelemetry = { module = 'io.opentelemetry:opentelemetry-bom', version.ref = 'managed-opentelemetry' }
boms-opentelemetry-alpha = { module = 'io.opentelemetry:opentelemetry-bom-alpha', version.ref = 'managed-opentelemetry-alpha' }
boms-opentelemetry-instrumentation-alpha = { module = 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha', version.ref = 'managed-opentelemetry-instrumentation-alpha' }

[plugins]
kotlinjvm = { id = 'org.jetbrains.kotlin.jvm', version.ref = 'kotlin' }
kotlinkapt = { id = 'org.jetbrains.kotlin.kapt', version.ref = 'kotlin' }
protobuf = { id = 'com.google.protobuf', version.ref = 'managed-protobuf' }
