[versions]
micronaut = '4.0.0-M4'
micronaut-test = '4.0.0-M4'
micronaut-docs = '2.0.0'
groovy = '4.0.6'
spock = '2.3-groovy-4.0'
shadow = '7.1.2'

managed-brave-instrumentation = '5.16.0'
managed-opentelemetry = '1.26.0'
managed-opentelemetry-alpha = '1.26.0-alpha'
managed-opentelemetry-instrumentation = '1.26.0'
managed-opentelemetry-instrumentation-alpha = '1.26.0-alpha'
managed-opentelemetry-contrib-aws-xray = '1.26.0'
managed-opentelemetry-contrib-aws-resources = '1.26.0-alpha'
managed-opentelemetry-gcp-trace = '0.23.0-alpha'
managed-protobuf = '0.9.3'
managed-zipkin = '2.24.0'
managed-zipkin-reporter = '2.16.4'

managed-jaeger = '1.8.1'
managed-opentracing = '0.33.0'
managed-opentracing-grpc = '0.2.3'
managed-brave-opentracing = '1.0.0'

javax-annotation = '1.3.2'
kotlin = '1.8.21'
kotlin-coroutines = '1.7.1'
grpc = '1.55.1'
protobuf = '3.23.1'
testcontainers = '1.18.1'
logback = "1.4.7"

micronaut-aws = "4.0.0-M3"
micronaut-grpc = '4.0.0-M1'
micronaut-reactor = '3.0.0-M2'
micronaut-rxjava2 = '2.0.0-M1'
micronaut-serde = '2.0.0-M8'
micronaut-kafka = '5.0.0-M3'
micronaut-gradle-plugin = "4.0.0-M3"


[libraries]
managed-opentelemetry-contrib-aws-xray = { module = 'io.opentelemetry.contrib:opentelemetry-aws-xray', version.ref = 'managed-opentelemetry-contrib-aws-xray'}
managed-opentelemetry-contrib-aws-resources = { module = 'io.opentelemetry.contrib:opentelemetry-aws-resources', version.ref = 'managed-opentelemetry-contrib-aws-resources'}
managed-opentelemetry-gcp-trace = { module = 'com.google.cloud.opentelemetry:exporter-auto', version.ref = 'managed-opentelemetry-gcp-trace'}

micronaut-aws = { module = 'io.micronaut.aws:micronaut-aws-bom', version.ref = 'micronaut-aws'}
micronaut-grpc = { module = 'io.micronaut.grpc:micronaut-grpc-bom', version.ref = 'micronaut-grpc'}
micronaut-reactor = { module = 'io.micronaut.reactor:micronaut-reactor-bom', version.ref = 'micronaut-reactor'}
micronaut-rxjava2 = { module = 'io.micronaut.rxjava2:micronaut-rxjava2-bom', version.ref = 'micronaut-rxjava2'}
micronaut-serde = { module = 'io.micronaut.serde:micronaut-serde-bom', version.ref = 'micronaut-serde'}
micronaut-kafka = { module = 'io.micronaut.kafka:micronaut-kafka-bom', version.ref = 'micronaut-kafka'}


brave-instrumentation-http = { module = 'io.zipkin.brave:brave-instrumentation-http' }
brave-opentracing = { module = 'io.opentracing.brave:brave-opentracing', version.ref = 'managed-brave-opentracing' }
grpc-protobuf = { module = 'io.grpc:grpc-protobuf', version.ref = 'grpc' }
grpc-stub = { module = 'io.grpc:grpc-stub', version.ref = 'grpc' }
jaeger = { module = 'io.jaegertracing:jaeger-thrift', version.ref = 'managed-jaeger' }
javax-annotation = { module = 'javax.annotation:javax.annotation-api', version.ref = 'javax-annotation' }
junit-jupiter-engine = { module = 'org.junit.jupiter:junit-jupiter-engine', version = '' }
kotlinx-coroutines-core = { module = 'org.jetbrains.kotlinx:kotlinx-coroutines-core', version.ref = 'kotlin-coroutines' }
kotlinx-coroutines-reactor = { module = 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor', version.ref = 'kotlin-coroutines' }
protobuf-java = { module = 'com.google.protobuf:protobuf-java', version.ref = 'protobuf' }
protobuf-java-util = { module = 'com.google.protobuf:protobuf-java-util', version.ref = 'protobuf' }
micronaut-docs-asciidoc-config-props = { module = 'io.micronaut.docs:micronaut-docs-asciidoc-config-props', version.ref = 'micronaut-docs' }
opentracing = { module = 'io.opentracing:opentracing-api', version.ref = 'managed-opentracing' }
opentracing-grpc = { module = 'io.opentracing.contrib:opentracing-grpc', version.ref = 'managed-opentracing-grpc' }
opentracing-util = { module = 'io.opentracing:opentracing-util', version.ref = 'managed-opentracing' }
protoc = { module = 'com.google.protobuf:protoc', version.ref = 'protobuf' }
protoc-grpc = { module = 'io.grpc:protoc-gen-grpc-java', version.ref = 'grpc' }
testcontainers-kafka = { module = 'org.testcontainers:kafka', version.ref = 'testcontainers' }
testcontainers-spock = { module = 'org.testcontainers:spock', version.ref = 'testcontainers' }
zipkin = { module = 'io.zipkin.zipkin2:zipkin', version.ref = 'managed-zipkin' }
zipkin-reporter = { module = 'io.zipkin.reporter2:zipkin-reporter' }

opentelemetry-api = { module = 'io.opentelemetry:opentelemetry-api' }
opentelemetry-sdk = { module = 'io.opentelemetry:opentelemetry-sdk' }
opentelemetry-sdk-testing = { module = 'io.opentelemetry:opentelemetry-sdk-testing' }
opentelemetry-autoconfigure = { module = 'io.opentelemetry:opentelemetry-sdk-extension-autoconfigure' }
opentelemetry-instrumentation-api = { module = 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-api' }
opentelemetry-instrumentation-grpc = { module = 'io.opentelemetry.instrumentation:opentelemetry-grpc-1.6'}
opentelemetry-instrumentation-kafka = { module = 'io.opentelemetry.instrumentation:opentelemetry-kafka-clients-2.6'}
opentelemetry-instrumentation-kafka-common = { module = 'io.opentelemetry.instrumentation:opentelemetry-kafka-clients-common'}
opentelemetry-instrumentation-api-semconv = { module = 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-semconv' }
opentelemetry-instrumentation-annotations = { module = 'io.opentelemetry.instrumentation: opentelemetry-instrumentation-annotations' }
opentelemetry-aws-sdk = { module = 'io.opentelemetry.instrumentation:opentelemetry-aws-sdk-2.2' }

awssdk-core = { module = 'software.amazon.awssdk:sdk-core' }

# BOMs
boms-opentelemetry = { module = 'io.opentelemetry:opentelemetry-bom', version.ref = 'managed-opentelemetry' }
boms-opentelemetry-alpha = { module = 'io.opentelemetry:opentelemetry-bom-alpha', version.ref = 'managed-opentelemetry-alpha' }
boms-opentelemetry-instrumentation = { module = 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom', version.ref = 'managed-opentelemetry-instrumentation' }
boms-opentelemetry-instrumentation-alpha = { module = 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha', version.ref = 'managed-opentelemetry-instrumentation-alpha' }
boms-brave = { module = 'io.zipkin.brave:brave-bom', version.ref = 'managed-brave-instrumentation' }
boms-zipkin-reporter = { module = 'io.zipkin.reporter2:zipkin-reporter-bom', version.ref = 'managed-zipkin-reporter' }


#plugins
shadow-plugin = { module = "gradle.plugin.com.github.johnrengelman:shadow", version.ref = "shadow" }
micronaut-gradle-plugin = { module = "io.micronaut.gradle:micronaut-gradle-plugin", version.ref="micronaut-gradle-plugin" }


[plugins]
kotlinjvm = { id = 'org.jetbrains.kotlin.jvm', version.ref = 'kotlin' }
kotlinkapt = { id = 'org.jetbrains.kotlin.kapt', version.ref = 'kotlin' }
protobuf = { id = 'com.google.protobuf', version.ref = 'managed-protobuf' }
